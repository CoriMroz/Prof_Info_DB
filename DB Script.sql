-- MySQL Script generated by MySQL Workbench
-- Fri May  7 10:49:27 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
-- -----------------------------------------------------
-- Schema new_schema1
-- -----------------------------------------------------
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`PROF_TYPE`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`PROF_TYPE` (
  `id` INT NOT NULL,
  `type_name` VARCHAR(45) NOT NULL,
  `num_classes` INT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `type_name_UNIQUE` (`type_name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`PROFESSOR`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`PROFESSOR` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `FName` VARCHAR(15) NULL,
  `LName` VARCHAR(15) NOT NULL,
  `Prof_Type` INT NULL,
  `Internal_ID` VARCHAR(45) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `Internal_ID_UNIQUE` (`Internal_ID` ASC) VISIBLE,
  INDEX `FK_Prof_Type_idx` (`Prof_Type` ASC) VISIBLE,
  CONSTRAINT `FK_Prof_Type`
    FOREIGN KEY (`Prof_Type`)
    REFERENCES `mydb`.`PROF_TYPE` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`SEMESTER_TYPE`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SEMESTER_TYPE` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `Type` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE INDEX `Type_UNIQUE` (`Type` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`SEMESTER`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SEMESTER` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `Semester_Type` INT NULL,
  `Year` YEAR(4) NOT NULL,
  PRIMARY KEY (`Id`),
  INDEX `FK_Semester_Type_ID_idx` (`Semester_Type` ASC) VISIBLE,
  CONSTRAINT `FK_Semester_Type_ID`
    FOREIGN KEY (`Semester_Type`)
    REFERENCES `mydb`.`SEMESTER_TYPE` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`CLASS`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`CLASS` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `Semester` INT NULL,
  `Program` VARCHAR(10) NULL,
  `Cat_Num` VARCHAR(10) NULL,
  `Name` VARCHAR(45) NULL,
  `Credit_Hours` DECIMAL(5) NULL,
  PRIMARY KEY (`id`),
  INDEX `FK_semester_id_idx` (`Semester` ASC) VISIBLE,
  CONSTRAINT `FK_semester_id`
    FOREIGN KEY (`Semester`)
    REFERENCES `mydb`.`SEMESTER` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`ROOM`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`ROOM` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `Building` VARCHAR(15) NOT NULL,
  `Number` VARCHAR(10) NOT NULL,
  `Capacity` INT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`PREF_TYPE`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`PREF_TYPE` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `Type_Name` VARCHAR(45) NULL,
  PRIMARY KEY (`Id`),
  UNIQUE INDEX `Type_Name_UNIQUE` (`Type_Name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`PROF_PREFERENCES`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`PROF_PREFERENCES` (
  `id` VARCHAR(45) NOT NULL,
  `ProfID` INT NOT NULL,
  `Pref_Type` INT NOT NULL,
  `Start` TIMESTAMP NOT NULL,
  `End` TIMESTAMP NOT NULL,
  `Scalar` INT NULL,
  INDEX `ProfID_idx` (`ProfID` ASC) INVISIBLE,
  INDEX `FK_Pref_Type_idx` (`Pref_Type` ASC) VISIBLE,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_Prof_Id`
    FOREIGN KEY (`ProfID`)
    REFERENCES `mydb`.`PROFESSOR` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Pref_Type`
    FOREIGN KEY (`Pref_Type`)
    REFERENCES `mydb`.`PREF_TYPE` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`MODE_TYPE`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`MODE_TYPE` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE INDEX `Name_UNIQUE` (`Name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`SECTION`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SECTION` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `Section` INT NOT NULL,
  `Class` INT NOT NULL,
  `Type` VARCHAR(5) NULL,
  `Mode` INT NULL,
  `Prof_id` INT NULL,
  `Start` DATETIME NULL,
  `End` DATETIME NULL,
  `Days` VARCHAR(7) NULL,
  `Room_id` INT NULL,
  `Seats` INT NULL,
  PRIMARY KEY (`id`),
  INDEX `FK_prof_id_idx` (`Prof_id` ASC) VISIBLE,
  INDEX `FK_room_id_idx` (`Room_id` ASC) VISIBLE,
  INDEX `FK_mode_id_idx` (`Mode` ASC) INVISIBLE,
  UNIQUE INDEX `SK` (`Class` ASC, `Section` ASC) INVISIBLE,
  CONSTRAINT `FK_proff_id`
    FOREIGN KEY (`Prof_id`)
    REFERENCES `mydb`.`PROFESSOR` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_room_id`
    FOREIGN KEY (`Room_id`)
    REFERENCES `mydb`.`ROOM` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_class_id`
    FOREIGN KEY (`Class`)
    REFERENCES `mydb`.`CLASS` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_mode_id`
    FOREIGN KEY (`Mode`)
    REFERENCES `mydb`.`MODE_TYPE` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`PROF_SPOUSE`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`PROF_SPOUSE` (
  `Id1` INT NOT NULL,
  `Id2` INT NOT NULL,
  PRIMARY KEY (`Id1`, `Id2`),
  INDEX `FK_SPOUSE2_idx` (`Id2` ASC) INVISIBLE,
  INDEX `FK_SPOUSE1_idx` (`Id1` ASC) INVISIBLE,
  CONSTRAINT `FK_SPOUSE1`
    FOREIGN KEY (`Id1`)
    REFERENCES `mydb`.`PROFESSOR` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SPOUSE2`
    FOREIGN KEY (`Id2`)
    REFERENCES `mydb`.`PROFESSOR` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `mydb` ;

-- -----------------------------------------------------
-- procedure procSelectProfessor
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE procSelectProfessor (IN pid INT)
BEGIN

IF pid IS NULL THEN 
	SELECT fname, lname, internal_id, type_name FROM professor
    INNER JOIN prof_type as pp ON pp.id = professor.id;
ELSE
	SELECT fname, lname, internal_id, type_name FROM professor
    INNER JOIN prof_type as pp ON pp.id = professor.id
	WHERE professor.id = pid;
     
END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procDeleteProfByID
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE procDeleteProfByID (IN ID int)
BEGIN
DELETE FROM professor 
WHERE professor.id = ID ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procDeleteProfByInterID
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE procDeleteProfByInterID (IN interID VarChar(45))
BEGIN
DELETE FROM professor 
WHERE professor.Internal_ID = interID AND id > -1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procSelectSection
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE procSelectSection ()
BEGIN
SELECT * FROM section;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procSelectRoom
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE procSelectRoom ()
BEGIN
SELECT * FROM room;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procSelectClasses
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE procSelectClasses ()
BEGIN
SELECT * FROM class;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procSelectProfessorAndSection
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE procSelectProfessorAndSection ()
BEGIN
SELECT * FROM professor
INNER JOIN section as s WHERE professor.id = s.profid;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procSelectSemester
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `procSelectSemester` ()
BEGIN

END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `mydb`.`PROF_TYPE`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`PROF_TYPE` (`id`, `type_name`, `num_classes`) VALUES (1, 'TT/T', NULL);
INSERT INTO `mydb`.`PROF_TYPE` (`id`, `type_name`, `num_classes`) VALUES (2, 'FTA', NULL);
INSERT INTO `mydb`.`PROF_TYPE` (`id`, `type_name`, `num_classes`) VALUES (3, 'PTA', NULL);
INSERT INTO `mydb`.`PROF_TYPE` (`id`, `type_name`, `num_classes`) VALUES (4, 'GTA', NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`SEMESTER_TYPE`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`SEMESTER_TYPE` (`Id`, `Type`) VALUES (1, 'Spring');
INSERT INTO `mydb`.`SEMESTER_TYPE` (`Id`, `Type`) VALUES (2, 'Fall');
INSERT INTO `mydb`.`SEMESTER_TYPE` (`Id`, `Type`) VALUES (3, 'Summer');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`PREF_TYPE`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`PREF_TYPE` (`Id`, `Type_Name`) VALUES (1, 'Can Within');
INSERT INTO `mydb`.`PREF_TYPE` (`Id`, `Type_Name`) VALUES (2, 'Cannot Within');
INSERT INTO `mydb`.`PREF_TYPE` (`Id`, `Type_Name`) VALUES (3, 'Must Day');
INSERT INTO `mydb`.`PREF_TYPE` (`Id`, `Type_Name`) VALUES (4, 'Cant Day');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mydb`.`MODE_TYPE`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`MODE_TYPE` (`Id`, `Name`) VALUES (1, 'In-Person');
INSERT INTO `mydb`.`MODE_TYPE` (`Id`, `Name`) VALUES (2, 'Online Synch');
INSERT INTO `mydb`.`MODE_TYPE` (`Id`, `Name`) VALUES (3, 'Online Asynch');

COMMIT;

